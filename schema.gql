# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type CreateUserDto {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  avatarUrl: String
  owner: Boolean
  token: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type EventDto {
  id: ID!
  createdAt: DateTime!
  startDate: DateTime!
  endDate: DateTime!
  name: String!
  description: String!
}

type GroupDto {
  id: ID!
  name: String!
  avatarUrl: String
  address: String
  number: Int
  zipCode: String
  city: String
  country: String
}

input inputEvent {
  startDate: DateTime!
  endDate: DateTime!
  name: String!
  description: String!
  invited: [ID!]!
  group: ID!
}

input inputGroup {
  name: String!
  avatarUrl: String
  address: String
  number: Int
  zipCode: String
  city: String
  country: String
}

input inputTask {
  name: String!
  description: String!
  assignee: ID!
  group: ID!
  priority: String!
}

input inputUpdateEvent {
  id: ID!
  name: String!
  description: String!
  startDate: DateTime!
  endDate: DateTime!
  invited: [ID!]!
}

input inputUpdateGroup {
  id: ID!
  name: String!
  avatarUrl: String
  address: String
  number: Int
  zipCode: String
  city: String
  country: String
}

input inputUpdateTask {
  id: ID!
  name: String!
  description: String!
  assignee: ID!
  priority: String!
  status: String!
}

input inputUser {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

type Mutation {
  register(data: inputUser!): CreateUserDto!
  login(password: String!, email: String!): ReturnUserDto!
  editName(lastName: String!, firstName: String!): ReturnUserDto!
  editUserDetails(color: String!, role: String!, nick: String!, id: ID!): ReturnUserDto!
  changeEmail(email: String!, password: String!): ReturnUserDto!
  changePassword(newPassword: String!, password: String!): ReturnUserDto!
  removeUserFromGroup(id: Float!): ReturnUserDto!
  requestPasswordReset(email: String!): RequestResetPasswordDto!
  setPassword(resetPasswordToken: String!, newPassword: String!): RequestResetPasswordDto!
  createGroup(data: inputGroup!): GroupDto!
  updateGroup(data: inputUpdateGroup!): GroupDto!
  createTask(data: inputTask!): TaskDto!
  updateTask(data: inputUpdateTask!): TaskDto!
  createEvent(data: inputEvent!): EventDto!
  updateEvent(data: inputUpdateEvent!): EventDto!
}

type Query {
  getUsers: [ReturnUserDto!]!
  whoAmI: ReturnUserDto!
  group(id: ID!): GroupDto!
  members(id: ID!): [ReturnUserDto!]!
  getCurrentTask: TaskDto!
  getGroupTasks(id: ID!): [TaskDto!]!
  getGroupTasksToDoInProgress(id: ID!): [TaskDto!]!
  getEvents(dateTo: String!, dateFrom: String!, id: ID!): [EventDto!]!
  getCurrentEvent: EventDto!
}

type RequestResetPasswordDto {
  success: Boolean!
}

type ReturnUserDto {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  nick: String!
  role: String!
  color: String!
  avatarUrl: String
  owner: Boolean!
  token: String
}

type TaskDto {
  id: ID!
  createdAt: DateTime!
  name: String!
  description: String!
  status: String!
  priority: String!
}
