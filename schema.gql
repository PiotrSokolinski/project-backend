# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Event {
  id: ID!
  createdAt: DateTime!
  name: String!
  description: String!
  startDate: DateTime!
  endDate: DateTime!
  author: User!
  group: Group!
  invitedMembers: [User!]!
}

type Group {
  id: ID!
  name: String!
  messages: [Message!]!
  members: [User!]!
  tasks: [Task!]!
  events: [Event!]!
  avatarUrl: String
  address: String
  number: Int
  zipCode: String
  city: String
  country: String
}

input inputEvent {
  startDate: DateTime!
  endDate: DateTime!
  name: String!
  description: String!
  invited: [ID!]!
  group: ID!
}

input inputGroup {
  name: String!
  avatarUrl: String
  address: String
  number: Int
  zipCode: String
  city: String
  country: String
}

input inputTask {
  name: String!
  description: String!
  assignee: ID!
  group: ID!
  priority: String!
}

input inputUpdateEvent {
  id: ID!
  name: String!
  description: String!
  startDate: DateTime!
  endDate: DateTime!
  invited: [ID!]!
}

input inputUpdateGroup {
  id: ID!
  name: String!
  avatarUrl: String
  address: String
  number: Int
  zipCode: String
  city: String
  country: String
}

input inputUpdateTask {
  id: ID!
  name: String!
  description: String!
  assignee: ID!
  priority: String!
  status: String!
}

input inputUser {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

type Message {
  id: ID!
  createdAt: DateTime!
  text: String!
  group: Group!
  sender: User!
}

type Mutation {
  register(data: inputUser!): User!
  registerWithInvitation(groupId: ID!, data: inputUser!): User!
  login(password: String!, email: String!): User!
  editName(lastName: String!, firstName: String!): User!
  editUserDetails(color: String!, role: String!, nick: String!, id: ID!): User!
  changeEmail(email: String!, password: String!): User!
  changePassword(newPassword: String!, password: String!): User!
  removeUserFromGroup(id: ID!): User!
  requestPasswordReset(email: String!): SuccessDto!
  setPassword(resetPasswordToken: String!, newPassword: String!): SuccessDto!
  sendInvitations(invitations: [String!]!): SuccessDto!
  createGroup(data: inputGroup!): Group!
  updateGroup(data: inputUpdateGroup!): Group!
  createTask(data: inputTask!): Task!
  updateTask(data: inputUpdateTask!): Task!
  changeTaskStatus(status: String!, id: ID!): Task!
  deleteTask(id: ID!): Task!
  createEvent(data: inputEvent!): Event!
  updateEvent(data: inputUpdateEvent!): Event!
  deleteEvent(id: ID!): Event!
  createMessage(id: ID!, text: String!): Message!
}

type Query {
  getUsers: [User!]!
  whoAmI: User!
  group(id: ID!): Group!
  getTask(id: ID!, current: Boolean!): Task
  getGroupTasks(id: ID!): [Task!]!
  getGroupTasksToDoInProgress(id: ID!): [Task!]!
  getEvents(dateTo: String!, dateFrom: String!, id: ID!): [Event!]!
  getEvent(id: ID!, current: Boolean!): Event
  getMessages(take: Int!, skip: Int!, id: ID!): [Message!]!
}

type Subscription {
  newMessageCreated: Message!
}

type SuccessDto {
  success: Boolean!
}

type Task {
  id: ID
  createdAt: DateTime
  name: String
  description: String
  status: String
  assignee: User
  author: User
  group: Group
  priority: String
}

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  messages: [Message!]!
  group: Group!
  authorizedTasks: [Task!]!
  authorizedEvents: [Event!]!
  assignedTasks: [Task!]!
  avatarUrl: String
  owner: Boolean!
  token: String
  nick: String!
  role: String!
  color: String!
}
